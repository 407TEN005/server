name: Auto deploy to NCP
run-name: Running
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # 체크아웃 및 JDK 세팅
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: main

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'

    # Gradle 권한 부여
    - name: Grant permission for gradlew
      run: chmod +x ./gradlew

    # Test 없이 빌드
    - name: Build with Gradle
      run: ./gradlew clean build -x test

    # 빌드한 jar 파일을 도커 이미지로 빌드하고 도커 허브에 푸시
    - name: web docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_REPO }} .
        docker push ${{ secrets.DOCKER_REPO }}

  deploy:
    # needs를 통해 build job이 수행 성공시에 작업되도록 설정
    needs: build
    runs-on: ubuntu-latest

    steps:
    # NCP 로그인 / docker image pull & run
    - name: NCP login and docker image pull and run
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.NCP_HOST }}
        username: ${{ secrets.NCP_USERNAME }}
        password: ${{ secrets.NCP_PASSWORD }}
        port: ${{ secrets.NCP_PORT }}
        script: |
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          if [ "$(sudo docker ps -q)" ]; then
            sudo docker stop $(sudo docker ps -q)
          fi
          if [ "$(sudo docker ps -aq)" ]; then
            sudo docker rm -f $(sudo docker ps -aq)
          fi
          sudo docker pull ${{ secrets.DOCKER_REPO }}
          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}
          sudo docker image prune -f
          ps -ef | grep docker
